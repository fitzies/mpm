// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Company {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  recruits   Recruit[]
  commanders Commander[]

  paradeStateSubmitted String?
  conducts             Conduct[]
  PostActionReview     PostActionReview[]
}

model Recruit {
  id        String   @id // 5-length string ID
  name      String
  statuses  Status[] // Recruits can have multiple statuses
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int

  polarAccessToken String?
  polarUserId      String?

  conducts   Conduct[]    @relation("RecruitConductParticipation") // Add this field
  ReportSick ReportSick[]
}

model Commander {
  id        Int      @id @default(autoincrement())
  name      String
  statuses  Status[] // Commanders can have multiple statuses
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int

  polarAccessToken String?
  polarUserId      String?

  username String @unique
  password String
}

model Status {
  id          Int        @id @default(autoincrement())
  type        StatusType
  startDate   String // Store start date in ddmmyy format
  endDate     String // Store end date in ddmmyy format
  recruit     Recruit?   @relation(fields: [recruitId], references: [id]) // Nullable, since it could be a Commander
  recruitId   String? // Nullable to allow either recruitId or commanderId
  commander   Commander? @relation(fields: [commanderId], references: [id]) // Nullable to allow either recruitId or commanderId
  commanderId Int? // Nullable to allow either recruitId or commanderId
  remarks     String?

  createdAt   DateTime     @default(now())
  createdById Int?
  ReportSick  ReportSick[]
}

enum StatusType {
  MC
  Other
  LD
  Physio
  ReportSick
  CustomStatus

  MCP1
  MCP2
  LDP1
  LDP2

  BookedOut
}

model Conduct {
  id    Int         @id @default(autoincrement())
  title String
  type  ConductType
  date  String

  recruits Recruit[] @relation("RecruitConductParticipation")
  fallouts String[]

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  supervisingId Int?
  conductingId  Int?
  chiefSafetyId Int?
}

enum ConductType {
  StengthTraining
  HRZTraining
  DistanceInterval
  VOC
  SOC
  MetabolicCircuit
  SAQ
  RouteMarch
  Swimming
  EnduranceRun
  SportsAndGames
  CombatPT
  CombatCircuit
  IPPT
  BCCT
  Fartlek
}

model ReportSick {
  id        Int     @id @default(autoincrement())
  recruit4d String
  recruit   Recruit @relation(fields: [recruit4d], references: [id])

  date      String
  companyId Int

  fufilled Boolean @default(false)

  statusId Int?
  status   Status? @relation(fields: [statusId], references: [id])
}

enum BarrackDamageType {
  Electrical
  Structural
  Plumbing
  Doors
  Windows
  Furniture
  Others
}

model BarrackDamage {
  id   Int    @id @default(autoincrement())
  name String

  type         BarrackDamageType
  description  String
  dateReported DateTime

  severe  Boolean
  company String
}

model PostActionReview {
  id   Int    @id @default(autoincrement())
  name String

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  conductType  ConductType
  dateReported String

  observation    String
  reflection     String
  recommendation String
}
